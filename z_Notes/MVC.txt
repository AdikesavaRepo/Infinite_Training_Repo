====how to bind a model to view in mvcï»¿===
@model IEnumerable<MVC_EF_DB.Models.Category> // if collection ienumerable
===bind procedure to view in mvc===
@model IEnumerable<MVC_EF_DB.Models.PROCEDURE_RESULT>
============
== To display
@foreach(var i in model)
==
app start = route for staring page


=============================================== DATA BASE FIRST MODEL APPROACH ========================================================
https://infics-my.sharepoint.com/:v:/r/personal/jayakumarj_infinite_com/Documents/Recordings/Dot%20Net%20with%20SQL%20Training_HTD%20Q2%2724-20240808_235543-Meeting%20Recording.mp4?csf=1&web=1&e=OwFEbd&nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJTdHJlYW1XZWJBcHAiLCJyZWZlcnJhbFZpZXciOiJTaGFyZURpYWxvZy1MaW5rIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXcifX0%3D
=======================
1) create a web application .net framework
2) add ado entity -- using entity framework 1 (DataBase First Model) - select connection - select database
3) add a controller  - empty

==== create insert data ==============
[HttpGet] = create view only in get = add view with required templete
ControllerAction1() //take from user

[HttpPost] // passing data to controller from view created
ControllerAction1(category c)

db.categories.add(c)
db.savechanges()

return redirecttoaction(" ")
=====
VIEWS COMES AUTOMATICALLY according t templets

==========================
Calling Stored Procedures
==========================
VIEW
@model IEnumerable<MVC_EF_DB.Models.CustOrdersOrders_Result>
CONTROLLER
public ActionResult SP_WithInput()
        {
            return View(db.CustOrdersOrders("ALFKI"));
        }
=========================================================================================================================================================


========================== CODE FIRST MODEL APPROACH ==============================
1) class for table 1 in folder model
2) Generic class for context in folder model
3) Generic Interface in a repository folder
4) Generic Implementing class in same repository folder
5) Controller for table1 accessing generic context and generic repository
6) add views build and Run

if want another table or anything

7) class for table2 in a folder called model
8) Controller for table2 accessing generic context and generic repository
 
enable-migrations
add-migration "added table2"
update-database

9) add views , build and Run

then any changes after do migrations and update database

============================================================================================








